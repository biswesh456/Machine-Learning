# -*- coding: utf-8 -*-
"""Transfer_Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OKlleQiR2haaVwccj3kMu8hprxRfOz_5
"""

!pip3 install torch

import torch
import numpy as np
import torch.nn as nn
import torch.nn.functional as F
from torchvision import datasets, transforms, models
import matplotlib.pyplot as plt

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

torch.manual_seed(1)

!git clone https://github.com/jaddoescad/ants_and_bees.git

!ls ants_and_bees/train/ants

transform_train = transforms.Compose([transforms.Resize((224, 224)),
                                      transforms.RandomHorizontalFlip(),
                                      transforms.RandomAffine(0, shear=10, scale=(0.8, 1.2)),
                                      transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2),
                                      transforms.RandomRotation(10),
                                      transforms.ToTensor(),
                                      transforms.Normalize([0.5], [0.5])
                                     ])

transform_validation = transforms.Compose([transforms.Resize((224, 224)),
                                           transforms.ToTensor(),
                                           transforms.Normalize([0.5], [0.5])
                                          ])

training_dataset = datasets.ImageFolder(root='ants_and_bees/train', transform=transform_train)
training_loader = torch.utils.data.DataLoader(dataset=training_dataset, batch_size=100, shuffle=True) 
validation_dataset = datasets.ImageFolder(root='ants_and_bees/val', transform=transform_validation)
validation_loader = torch.utils.data.DataLoader(dataset=validation_dataset, batch_size=100, shuffle=False)

model = models.alexnet(pretrained=True)
model

for params in model.features.parameters():
  params.requires_grad = False

n_inputs = model.classifier[6].in_features
last_layer = nn.Linear(n_inputs, 2)
model.classifier[6] = last_layer
model

model.to(device)

criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.0001)

epochs = 10
history=[]
val_history=[]
for e in range(epochs):
  current_loss = 0.0
  running_correct = 0.0
  validation_loss = 0.0
  validation_acc = 0.0
  for inputs, labels in training_loader:
    inputs = inputs.to(device)
    labels = labels.to(device)
    
#     inputs = inputs.view(inputs.shape[0], -1)   this is required is passing 1 dimensional input
    outputs = model(inputs)
    loss = criterion(outputs, labels)
    
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
    
    _, preds = torch.max(outputs, 1)
    
    current_loss += loss.item()
    running_correct += torch.sum(preds == labels.data)

  else:
    with torch.no_grad():
      for val_inputs, val_labels in validation_loader:
        val_inputs = val_inputs.to(device)
        val_labels = val_labels.to(device)
        
#         val_inputs = val_inputs.view(val_inputs.shape[0], -1)
        val_output = model(val_inputs)
        val_loss = criterion(val_output, val_labels)
        
        _, val_preds = torch.max(val_output, 1)
        validation_loss += val_loss.item()
        validation_acc += torch.sum(val_preds == val_labels.data)
           
      epoch_loss = current_loss/(len(training_loader.dataset))
      epoch_acc = running_correct.float()/len(training_loader.dataset)
      validation_loss = validation_loss/(len(validation_loader.dataset))
      validation_acc = validation_acc.float()/len(validation_loader.dataset)
      history.append(epoch_loss)
      val_history.append(validation_loss)
      print('training loss: {:.4f}, training accuracy: {:.4f}, validation loss: {:.4f}, validation accuracy: {:.4f}'.format(epoch_loss, epoch_acc.item(), validation_loss, validation_acc.item()))

plt.plot(history, label="training loss")
plt.plot(val_history, label="validation loss")
plt.legend()

